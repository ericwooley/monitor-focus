{"version":3,"sources":["../src/get-eyes.js"],"names":[],"mappings":"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","file":"get-eyes.js","sourcesContent":["import cv from 'opencv'\n\nexport default class EyeDetector {\n  static convertToOneZeroArray (im) {\n    const bwRepresentation = []\n    eachPixel(im, (pixel) => {\n      bwRepresentation.push(checkBlack(pixel) ? 0 : 1)\n    })\n    return bwRepresentation\n  }\n  constructor () {\n  }\n  initCamera () {\n    this.camera = new cv.VideoCapture(0)\n  }\n\n  eyesFromImages (imagePaths = [], cb) {\n    console.log(imagePaths.length)\n    if (!imagePaths.length) return\n    const imagePath = imagePaths.shift()\n    console.log('loading', imagePath)\n    cv.readImage(imagePath, (err, im) => {\n      if (err) throw err\n      detectEyes(im, (...args) => {\n        cb(...args)\n        setTimeout(() => {\n          this.eyesFromImages(imagePaths, cb)\n        }, 1000)\n      })\n    })\n  }\n\n  shutDown () {\n    this.camera.close()\n    this.camera = null\n  }\n  getImageFromWebcam (cb, cameraNumber = 0) {\n    this.initCamera()\n    setTimeout(() => {\n      this.camera.read((err, im) => {\n        if (err) {\n          this.camera.close()\n          console.error(err)\n        } else {\n          detectEyes(cb)\n        }\n      })\n    }, 500)\n  }\n}\n\nfunction detectEyes (im, cb) {\n  im.detectObject(cv.EYE_CASCADE, {}, processEyes(im, cb))\n}\n\nfunction eachPixel (im, cb) {\n  for (let col = 0; col < im.width(); col++) {\n    for (let row = 0; row < im.height(); row++) {\n      const pixel = im.pixel(row, col)\n      cb(pixel, row, col)\n    }\n  }\n}\n\nfunction eachPixelHorizontal (im, cb) {\n  for (let row = 0; row < im.height(); row++) {\n    for (let col = 0; col < im.width(); col++) {\n      const pixel = im.pixel(row, col)\n      cb(pixel, row, col)\n    }\n  }\n}\n\nfunction averageImageBrightness (im) {\n  let totalBrightness = 0\n  let numPixels = 0\n  eachPixel(im, (pixel) => {\n    totalBrightness += getBrightness(pixel)\n    numPixels++\n  })\n  return totalBrightness / numPixels\n}\n\nfunction getBrightness ([r, g, b]) {\n  return (r + g + b) / 3\n}\n\nfunction whiteOrBlackPixel (val, threshold) {\n  return val > threshold ? 255 : 0\n}\nfunction blackOrWhite ([r, g, b], threshold) {\n  const brightness = getBrightness([r, g, b])\n  const newColor = whiteOrBlackPixel(brightness, threshold)\n  return [newColor, newColor, newColor]\n}\n\nfunction checkBlack ([r, g, b]) {\n  return !r && !g && !b\n}\n\nfunction colorsDifferTwice (arr) {\n  let foundChange = false\n  let last = arr[0]\n  for (var i = 1; i < arr.length; i++) {\n    if (arr[i] !== last) {\n      if (foundChange) return true\n      foundChange = true\n    }\n  }\n  return false\n}\n\nconst black = [0, 0, 0]\nconst white = [255, 255, 255]\n\nfunction fillVerticalGaps (threshold, im) {\n  const firstPixelIsBlack = checkBlack(im.pixel(0, 0))\n  const buffer = []\n  for (var i = 0; i < threshold; i++) {\n    buffer.push(firstPixelIsBlack)\n  }\n  eachPixel(im, (pixel, row, col) => {\n    const pixelIsBlack = checkBlack(pixel)\n    buffer.push(pixelIsBlack)\n    buffer.shift()\n    if (colorsDifferTwice(buffer)) {\n      for (var i = 0; i < buffer.length; i++) {\n        im.pixel(row - i, col, pixelIsBlack ? black : white)\n      }\n    }\n  })\n}\n\nfunction fillHorizontalGaps (threshold, im) {\n  const firstPixelIsBlack = checkBlack(im.pixel(0, 0))\n  const buffer = []\n  for (var i = 0; i < threshold; i++) {\n    buffer.push(firstPixelIsBlack)\n  }\n  eachPixelHorizontal(im, (pixel, row, col) => {\n    const pixelIsBlack = checkBlack(pixel)\n    buffer.push(pixelIsBlack)\n    buffer.shift()\n    if (colorsDifferTwice(buffer)) {\n      for (var i = 0; i < buffer.length; i++) {\n        im.pixel(row, col - i, pixelIsBlack ? black : white)\n      }\n    }\n  })\n}\n\nfunction fillGaps (im, threshold = 10) {\n  fillVerticalGaps(threshold, im)\n  fillHorizontalGaps(threshold, im)\n  return im\n}\n\nconst green = [0, 255, 0]\n\nfunction replaceWhite (im, color = green) {\n  const brightness = averageImageBrightness(im)\n  eachPixel(im, (pixel, row, col) => {\n    const newColor = blackOrWhite(pixel, brightness)\n    im.pixel(row, col, newColor)\n  })\n  return im\n}\n\nfunction processEyes (im, cb) {\n  return (err, faces) => {\n    if (err) throw err\n    faces.map(({x, y, width, height}, index) => {\n      console.log('procsessing')\n      let original = im.clone().crop(x, y, width, height)\n      let processed = replaceWhite(original.clone())\n      processed = fillGaps(processed)\n\n      // to debug\n      // im.ellipse(x + width / 2, y + height / 2, width / 5, height / 5)\n      cb({original, processed})\n    })\n  }\n}\n"]}